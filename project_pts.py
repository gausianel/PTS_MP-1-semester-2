# -*- coding: utf-8 -*-
"""Project PTS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YiJw94NXoSzj5kL3QM_9mTj4_xHHwAcn
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import zipfile
import os
import keras
import random
import shutil
from matplotlib.image import imread
from pathlib import Path
import shutil
import random
from PIL import Image
import warnings
warnings.filterwarnings('ignore')
from pathlib import Path

import tensorflow as tf

from tensorflow import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Conv2D, MaxPooling2D, Flatten, Dropout,BatchNormalization,Dropout
from tensorflow.keras.utils import image_dataset_from_directory
from tensorflow.keras.callbacks import EarlyStopping
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import ReduceLROnPlateau
from tensorflow.keras.preprocessing.image import ImageDataGenerator

from google.colab import files
files.upload()

#kurang
!mkdir ~/.kaggle
!cp kaggle-4.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle-4.json

!kaggle datasets download -d muniryadi/cat-vs-rabbit

zip_ref = zipfile.ZipFile('/content/cat-vs-rabbit.zip', 'r')
zip_ref.extractall('/content')
zip_ref.close()

test = "/content/train-cat-rabbit/cat/cat.1.jpg"
plt.imshow(imread(test))

test = keras.utils.image_dataset_from_directory(
    directory = '/content/val-cat-rabbit',
    labels='inferred',
    label_mode='int',
    batch_size=40,
    image_size=(100, 100),
)

train = keras.utils.image_dataset_from_directory(
    directory = '/content/train-cat-rabbit',
    labels='inferred',
    label_mode='int',
    batch_size=40,
    image_size=(100, 100),
)

for image_path , label_path in train.take(1):
  print(image_path.shape)
  print(label_path.numpy())

def process(image, label):
  tf.cast(image / 255.0, tf.float32)
  return image, label
train = train.map(process)
test = train.map(process)

Model = Sequential()
Model.add(Conv2D(32,kernel_size=(3,3),padding = 'valid',activation = 'relu',input_shape = (100,100,3)))

Model.add(MaxPooling2D(pool_size=(2,2),strides=1,padding = 'valid'))
Model.add(Conv2D(128,kernel_size=(3,3),padding = 'valid',activation = 'relu'))
Model.add(MaxPooling2D(pool_size=(2,2),strides=1,padding = 'valid'))

Model.add(Conv2D(64,kernel_size=(3,3),padding = 'valid',activation = 'relu'))
Model.add(MaxPooling2D(pool_size=(2,2),strides=1,padding = 'valid'))

Model.add(Conv2D(32,kernel_size=(3,3),padding = 'valid',activation = 'relu'))
Model.add(MaxPooling2D(pool_size=(2,2),strides=1,padding = 'valid'))

Model.add(Conv2D(16,kernel_size=(3,3),padding = 'valid',activation = 'relu'))
Model.add(MaxPooling2D(pool_size=(2,2),strides=1,padding = 'valid'))

Model.add(Flatten())
Model.add(Dense(128,activation = 'relu'))

Model.add(Dense(1,activation = 'sigmoid'))
early_stop = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)

optimizer = Adam(learning_rate=0.001)
reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=3, min_lr=1e-6)

Model.compile(loss = 'binary_crossentropy',optimizer = 'adam',metrics = ['accuracy'])

Model.fit(train ,validation_data=test ,epochs = 20, callbacks=[reduce_lr, early_stop])

plt.plot(Model.history.history['accuracy'],label = 'train accuracy')
plt.plot(Model.history.history['val_accuracy'],label = 'val accuracy')
plt.legend()
plt.show()

plt.plot(Model.history.history['loss'],label = 'train loss')
plt.plot(Model.history.history['val_loss'],label = 'val loss')
plt.legend()
plt.show()

import tensorflow as tf
import os
converter = tf.lite.TFLiteConverter.from_keras_model(Model)
converter.optimizations = [tf.lite.Optimize.DEFAULT]
tflite_model = converter.convert()

model_path = 'model_quantized-final-gazael.tflite'
with open(model_path, 'wb') as f:
    f.write(tflite_model)

size_in_bytes = os.path.getsize(model_path)
size_in_mb = size_in_bytes / 1024 / 1024

print(f"Quantized Model Size: {size_in_mb:.2f} MB")

import numpy as np
import tensorflow as tf
from PIL import Image
import matplotlib.pyplot as plt

interpreter = tf.lite.Interpreter(model_path="/content/model_quantized-final-gazael.tflite")
interpreter.allocate_tensors()

input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()

image_path = '/content/train-cat-rabbit/cat/cat.103.jpg'
img = Image.open(image_path)

input_shape = input_details[0]['shape']
target_height, target_width = input_shape[1], input_shape[2]
expected_channels = input_shape[3]

img = img.resize((target_width, target_height))

img_array = np.array(img).astype(np.float32) / 255.0

if expected_channels == 1:
    img_array = np.mean(img_array, axis=-1, keepdims=True)

img_array = np.expand_dims(img_array, axis=0)

interpreter.set_tensor(input_details[0]['index'], img_array)
interpreter.invoke()

predictions = interpreter.get_tensor(output_details[0]['index'])

probability = predictions[0][0]

class_labels = ['cat', 'rabbit']

predicted_class = 1 if probability >= 0.5 else 0
predicted_label = class_labels[predicted_class]
plt.title(f"Predicted Class: {predicted_label} ({probability:.4f})")
plt.imshow(img)
plt.axis('off')
plt.show()

